generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
  createdAt         DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  createdAt    DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  role           Role      @default(DRIVER)
  points         Int       @default(0)
  hashedPassword String?
  isBlocked      Boolean   @default(false)
  accounts       Account[]
  sessions       Session[]
  reports        Report[]  @relation("UserReports")
  moderatedReports Report[] @relation("ModeratedReports")
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model PointRewardVersion {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  amount    Int
  startDate DateTime @default(now())
  endDate   DateTime?
  createdAt DateTime @default(now())
  reports   Report[]
}

model ReportType {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String    @unique
  description String?
  icon        String?   // Emoji or icon class
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  reports     Report[]
}

model Report {
  id                 String             @id @default(auto()) @map("_id") @db.ObjectId
  title              String
  description        String
  latitude           Float
  longitude          Float
  address            String?
  city               String?
  district           String?
  images             String[]
  status             ReportStatus       @default(PENDING)
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  userId             String             @db.ObjectId
  user               User               @relation("UserReports", fields: [userId], references: [id])
  moderatorId        String?            @db.ObjectId
  moderator          User?              @relation("ModeratedReports", fields: [moderatorId], references: [id])
  rejectionReason    String?
  pointRewardVersionId String?          @db.ObjectId
  pointRewardVersion PointRewardVersion? @relation(fields: [pointRewardVersionId], references: [id])
  reportTypeId       String             @db.ObjectId
  reportType         ReportType         @relation(fields: [reportTypeId], references: [id])

  @@index([userId])
  @@index([moderatorId])
  @@index([reportTypeId])
}

model SystemConfig {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  key       String   @unique
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  ADMIN
  MODERATOR
  DRIVER
}

enum ReportStatus {
  PENDING
  APPROVED
  REJECTED
}

enum ReportCategory {
  ROAD_CONDITION
  TRAFFIC_VIOLATION
  ACCIDENT_PRONE
} 