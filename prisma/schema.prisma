generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(DRIVER)
  points        Int       @default(0)
  accounts      Account[]
  sessions      Session[]
  reports       Report[]
  moderatedReports Report[] @relation("ModeratedReports")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Report {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  latitude    Float
  longitude   Float
  images      String[]
  status      ReportStatus @default(PENDING)
  category    ReportCategory
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String   @db.ObjectId
  moderatorId String?  @db.ObjectId
  rejectionReason String?
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  moderator   User?    @relation("ModeratedReports", fields: [moderatorId], references: [id])
}

enum Role {
  DRIVER
  MODERATOR
  ADMIN
}

enum ReportStatus {
  PENDING
  APPROVED
  REJECTED
}

enum ReportCategory {
  ACCIDENT_PRONE
  TRAFFIC_VIOLATION
  ROAD_CONDITION
  POLICE_CHECKPOINT
  OTHER
} 